plugins {
    id "java"
    id "maven"
    id "maven-publish"
    id "jacoco"
}

def environment = new Properties()
def environmentFile = file(".env")

if (environmentFile.exists()) {
    environmentFile.withReader("UTF-8") { reader ->
        environment.load(reader)
    }
}

def repositoryUrl      = (environment.getProperty("REPOSITORY_URL") != null ? environment.getProperty("REPOSITORY_URL") : System.getenv("REPOSITORY_URL"))
def repositoryUserName = (environment.getProperty("REPOSITORY_USERNAME") != null ? environment.getProperty("REPOSITORY_USERNAME") : System.getenv("REPOSITORY_USERNAME"))
def repositoryPassword = (environment.getProperty("REPOSITORY_PASSWORD") != null ? environment.getProperty("REPOSITORY_PASSWORD") : System.getenv("REPOSITORY_PASSWORD"))

repositories {
    mavenLocal()
	mavenCentral()
	maven {
		url = "${repositoryUrl}"
		credentials {
			username = "${repositoryUserName}"
			password = "${repositoryPassword}"
		}
	}
}

sourceSets {
    main {
        java {
            srcDirs("src/main/java")
        }
	    resources {
    	    srcDirs("src/main/resources")
    	}
    }
    test{
        java {
            srcDirs("src/test/java")
        }
	    resources {
    	    srcDirs("src/test/resources")
    	}
    }
}

dependencies {
	implementation("org.apache.activemq:activemq-broker:5.19.1")
    implementation("org.apache.activemq:activemq-client:5.19.1")
    implementation("net.sourceforge.barbecue:barbecue:1.5-beta1")
    implementation("net.bytebuddy:byte-buddy:1.12.10")
    implementation("commons-codec:commons-codec:1.19.0")
    implementation("org.apache.commons:commons-dbcp2:2.9.0")
    implementation("commons-fileupload:commons-fileupload:1.6.0")
    implementation("org.apache.commons:commons-jexl3:3.2.1")
    implementation("commons-net:commons-net:3.9.0")
    implementation("org.apache.commons:commons-text:1.14.0")
    implementation("org.dom4j:dom4j:2.1.3")
    implementation("com.sun.mail:dsn:2.0.1")
    implementation("org.ehcache:ehcache:3.10.1")
    implementation("com.sun.mail:gimap:2.0.1")
    implementation("com.google.guava:guava:32.0.1-jre")
    implementation("com.h2database:h2:2.2.224")
    implementation("org.hibernate.common:hibernate-commons-annotations:5.1.2.Final")
    implementation("org.hibernate:hibernate-core:5.6.10.Final")
    implementation("org.hibernate:hibernate-ehcache:5.6.10.Final")
    implementation("org.hibernate:hibernate-jcache:5.6.10.Final")
    implementation("org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final")
    implementation("org.apache.httpcomponents:httpcore:4.4.15")
    implementation("org.apache.httpcomponents:httpcore-nio:4.4.15")
    implementation("org.apache.httpcomponents:httpclient:4.5.13")
    implementation("org.apache.httpcomponents:httpmime:4.5.13")
    implementation("com.sun.mail:imap:2.0.1")
    implementation("com.itextpdf:itextpdf:5.5.13.4")
    implementation("com.fasterxml.jackson.core:jackson-annotations:2.15.0")
    implementation("com.fasterxml.jackson.core:jackson-core:2.15.0")
    implementation("com.fasterxml.jackson.core:jackson-databind:2.15.0")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:2.15.0")
    implementation("net.sf.jasperreports:jasperreports:6.21.5")
    implementation("com.google.zxing:javase:3.5.0")
    implementation("net.sf.jmimemagic:jmimemagic:0.1.5")
    implementation("javax.servlet:jstl:1.2")
    implementation("org.apache.logging.log4j:log4j-api:2.25.2")
    implementation("org.apache.logging.log4j:log4j-core:2.25.2")
    implementation("org.apache.logging.log4j:log4j-1.2-api:2.25.2")
    implementation("com.sun.mail:mailapi:2.0.1")
    implementation("com.mysql:mysql-connector-j:9.4.0")
    implementation("com.squareup.okhttp3:okhttp:4.12.0")
    implementation("com.squareup.okio:okio:3.16.2")
    implementation("org.apache.poi:poi:5.4.1")
    implementation("org.apache.poi:poi-ooxml:5.4.1")
    implementation("com.sun.mail:pop3:2.0.1")
    implementation("org.seleniumhq.selenium:selenium-api:4.6.0")
    implementation("org.seleniumhq.selenium:selenium-chrome-driver:4.6.0")
    implementation("org.seleniumhq.selenium:selenium-remote-driver:4.6.0")
    implementation("org.seleniumhq.selenium:selenium-support:4.6.0")
    implementation("com.sun.mail:smtp:2.0.1")
    implementation("com.github.ua-parser:uap-java:1.6.1")
    implementation("javax.validation:validation-api:2.0.1.Final")
    implementation("javax.servlet.jsp:javax.servlet.jsp-api:2.3.3")
    implementation("javax.servlet:javax.servlet-api:4.0.1")

    testImplementation("junit:junit:4.13.2")
    testImplementation("org.mockito:mockito-core:5.2.0")
    testImplementation("org.mockito:mockito-inline:5.2.0")
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

tasks.withType(JavaCompile).configureEach {
	options.encoding    = "UTF-8"
    options.deprecation = true
}

group   = "${buildPackage}"
version = "${buildVersion}"

tasks.withType(Jar).configureEach {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	includeEmptyDirs   = false

    exclude("META-INF/**")
    exclude("**/*.html")
}

tasks.register("allJar", Jar) {
    archiveClassifier = "all"

    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from(sourceSets.main.output)
}

tasks.register("modelJar", Jar) {
	archiveClassifier = "model"

    from(sourceSets.main.output) {
		include("**/model/**")
	}
}

tasks.register("controllerJar", Jar) {
	archiveClassifier = "controller"

	from(sourceSets.main.output) {
		include("**/controller/**")
	}
}

tasks.register("persistenceJar", Jar) {
	archiveClassifier = "persistence"

	from(sourceSets.main.output) {
		include("**/persistence/**")
	}
}

tasks.register("serviceJar", Jar) {
	archiveClassifier = "service"

	from(sourceSets.main.output) {
		include("**/service/**")
	}
}

tasks.register("uiJar", Jar) {
	archiveClassifier = "ui"

	from(sourceSets.main.output) {
		include("**/ui/**")
	}
}

tasks.register("resourcesJar", Jar) {
	archiveClassifier = "resources"

	from(sourceSets.main.output) {
		include("etc/**/*.properties")
		include("etc/**/*.xml")
		include("etc/**/*.xsd")
	}
}

tasks.register("coreJar", Jar) {
	archiveClassifier = "core"

	from(sourceSets.main.output) {
        exclude("**/model/**")
        exclude("**/controller/**")
        exclude("**/persistence/**")
        exclude("**/service/**")
        exclude("**/ui/**")
        exclude("etc/**/*.properties")
        exclude("etc/**/*.xml")
        exclude("etc/**/*.xsd")
	}
}

tasks.register("javadocJar", Jar) {
	archiveClassifier = "javadoc"

	from(javadoc)
}

test {
    finalizedBy(jacocoTestReport)
}

jacoco {
    toolVersion = "0.8.12"
}

jacocoTestReport {
    reports {
        html.required.set(true)
        xml.required.set(true)
        csv.required.set(false)
    }
}

artifacts {
    archives(allJar)
    archives(coreJar)
    archives(resourcesJar)
    archives(controllerJar)
	archives(modelJar)
	archives(persistenceJar)
	archives(serviceJar)
	archives(uiJar)
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "${repositoryUrl}") {
                authentication(userName: "${repositoryUserName}", password: "${repositoryPassword}")
            }
        }
    }
}