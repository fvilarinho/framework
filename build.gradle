plugins {
    id "java"
    id "maven"
    id "maven-publish"
    id "jacoco"
}

def environment = new Properties()
def environmentFile = file(".env")

if (environmentFile.exists()) {
    environmentFile.withReader("UTF-8") { reader ->
        environment.load(reader)
    }
}

def repositoryUrl      = (environment.getProperty("REPOSITORY_URL") != null ? environment.getProperty("REPOSITORY_URL") : System.getenv("REPOSITORY_URL"))
def repositoryUserName = (environment.getProperty("REPOSITORY_USERNAME") != null ? environment.getProperty("REPOSITORY_USERNAME") : System.getenv("REPOSITORY_USERNAME"))
def repositoryPassword = (environment.getProperty("REPOSITORY_PASSWORD") != null ? environment.getProperty("REPOSITORY_PASSWORD") : System.getenv("REPOSITORY_PASSWORD"))

repositories{
    mavenLocal()
	mavenCentral()
	maven{
		url = "${repositoryUrl}"
		credentials{
			username = "${repositoryUserName}"
			password = "${repositoryPassword}"
		}
	}
}

sourceSets{
    main{
        java{
            srcDirs "src/main/java"
        }
	    resources{
    	    srcDirs "src/main/resources"
    	}
    }
    test{
        java{
            srcDirs "src/test/java"
        }
	    resources{
    	    srcDirs "src/test/resources"
    	}
    }
}

dependencies{
	compile "org.apache.activemq:activemq-broker:5.19.1"
	compile "org.apache.activemq:activemq-client:5.19.1"
	compile "net.sourceforge.barbecue:barbecue:1.5-beta1"
	compile "net.bytebuddy:byte-buddy:1.12.10"
	compile "org.apache.commons:commons-dbcp2:2.9.0"
	compile "commons-fileupload:commons-fileupload:1.6.0"
	compile "org.apache.commons:commons-jexl3:3.2.1"
	compile "commons-net:commons-net:3.9.0"
	compile "org.apache.commons:commons-text:1.14.0"
	compile "org.dom4j:dom4j:2.1.3"
	compile "com.sun.mail:dsn:2.0.1"
	compile "org.ehcache:ehcache:3.10.1"
	compile "com.sun.mail:gimap:2.0.1"
	compile "org.hibernate.common:hibernate-commons-annotations:5.1.2.Final"
	compile "org.hibernate:hibernate-core:5.6.10.Final"
	compile "org.hibernate:hibernate-ehcache:5.6.10.Final"
	compile "org.hibernate:hibernate-jcache:5.6.10.Final"
	compile "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final"
	compile "com.google.guava:guava:31.1-jre"
	compile "org.glassfish.hk2:hk2-api:3.0.3"
	compile "org.glassfish.hk2:hk2-core:3.0.3"
	compile "org.glassfish.hk2:hk2-locator:3.0.3"
	compile "org.glassfish.hk2:hk2-utils:3.0.3"
	compile "org.apache.httpcomponents:httpcore:4.4.15"
	compile "org.apache.httpcomponents:httpcore-nio:4.4.15"
	compile "org.apache.httpcomponents:httpclient:4.5.13"
	compile "org.apache.httpcomponents:httpmime:4.5.13"
	compile "com.sun.mail:imap:2.0.1"
	compile "com.lowagie:itext:4.2.2"
	compile "com.fasterxml.jackson.core:jackson-annotations:2.15.0"
	compile "com.fasterxml.jackson.core:jackson-core:2.15.0"
	compile "com.fasterxml.jackson.core:jackson-databind:2.15.0"
	compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:2.15.0"
	compile "net.sf.jasperreports:jasperreports:6.20.3"
	compile "com.google.zxing:javase:3.5.0"
	compile "net.sf.jmimemagic:jmimemagic:0.1.5"
	compile "javax.servlet:jstl:1.2"
	compile "com.sun.mail:mailapi:2.0.1"
	compile "com.mysql:mysql-connector-j:9.4.0"
	compile "com.squareup.okhttp3:okhttp:4.12.0"
	compile "com.squareup.okio:okio:3.1.0"
	compile "org.apache.poi:poi:5.4.1"
	compile "org.apache.poi:poi-ooxml:5.4.1"
	compile "com.sun.mail:pop3:2.0.1"
	compile "com.wcohen:com.wcohen.secondstring:0.1"
	compile "org.seleniumhq.selenium:selenium-api:4.1.2"
	compile "org.seleniumhq.selenium:selenium-chrome-driver:4.1.2"
	compile "org.seleniumhq.selenium:selenium-java:4.1.2"
	compile "org.seleniumhq.selenium:selenium-leg-rc:4.1.2"
	compile "org.seleniumhq.selenium:selenium-remote-driver:4.1.2"
	compile "org.seleniumhq.selenium:selenium-support:4.1.2"
	compile "com.sun.mail:smtp:2.0.1"
	compile "com.github.ua-parser:uap-java:1.6.1"
	compile "javax.validation:validation-api:2.0.1.Final"
	compile "javax.servlet.jsp:javax.servlet.jsp-api:2.3.3"
	compile "javax.servlet:javax.servlet-api:4.0.1"

    testImplementation "junit:junit:4.13.2"
    testImplementation "org.mockito:mockito-core:5.2.0"
    testImplementation "org.mockito:mockito-inline:5.2.0"
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = "UTF-8"
}

tasks.withType(Jar).configureEach {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	includeEmptyDirs = false
}

tasks.withType(Jar).configureEach {
	includeEmptyDirs = false
	exclude "META-INF/**"
	exclude "**/*.html"
}

group   = "${buildPackage}"
version = "${buildVersion}"

def coreExcludes = []

tasks.register("modelJar", Jar) {
	archiveClassifier = "model"
	from(sourceSets.main.output) {
		include "**/model/**"
		coreExcludes.addAll(includes)
	}
}

tasks.register("controllerJar", Jar) {
	archiveClassifier = "controller"
	from(sourceSets.main.output) {
		include "**/controller/**"
		coreExcludes.addAll(includes)
	}
}

tasks.register("persistenceJar", Jar) {
	archiveClassifier = "persistence"
	from(sourceSets.main.output) {
		include "**/persistence/**"
		coreExcludes.addAll(includes)
	}
}

tasks.register("serviceJar", Jar) {
	archiveClassifier = "service"
	from(sourceSets.main.output) {
		include "**/service/**"
		coreExcludes.addAll(includes)
	}
}

tasks.register("uiJar", Jar) {
	archiveClassifier = "ui"
	from(sourceSets.main.output) {
		include "**/ui/**"
		coreExcludes.addAll(includes)
	}
}

tasks.register("resourcesJar", Jar) {
	archiveClassifier = "resources"
	from(sourceSets.main.output) {
		include "etc/**/*.properties"
		include "etc/**/*.xml"
		include "etc/**/*.xsd"
		coreExcludes.addAll(includes)
	}
}

tasks.register("coreJar", Jar) {
	archiveClassifier = "core"
	from(sourceSets.main.output) {
		exclude coreExcludes
	}
}

javadoc.options.addStringOption("Xdoclint:none", "-quiet")

tasks.register("javadocJar", Jar) {
	archiveClassifier = "javadoc"
	from javadoc
}

test {
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.12"
}

jacocoTestReport {
    reports {
        html.required.set(true)
        xml.required.set(true)
        csv.required.set(false)
    }
}

artifacts{
	archives modelJar
	archives controllerJar
	archives persistenceJar
	archives serviceJar
	archives uiJar
	archives resourcesJar
	archives coreJar
}

uploadArchives{
    repositories{
        mavenDeployer{
            repository(url: "${repositoryUrl}"){
                authentication(userName: "${repositoryUserName}",
						       password: "${repositoryPassword}")
            }
        }
    }
}